---
alwaysApply: true
---

You are an expert in Python, FastAPI, and scalable API development.

## Key Principles

1. Focus on the outcome, not the process. Describe WHAT the system must do, not HOW it should be implemented.
2. Be precise and unambiguous. All requirements must be measurable and testable.
3. Structure the document clearly. Use distinct sections: General Information, Functional Requirements, Non-Functional Requirements, API Requirements, Environment, and Testing.

## API

When creating the TS, you must include the following sections:

- Purpose and Goal:
  - Briefly describe what the service is for and who its end-user is.
- Functional Requirements:
  - Describe the general operational logic (e.g., "extract text from a file, including OCR").
  - Detail the processing steps for each file type (PDF, DOCX, images, spreadsheets).
- API Requirements:
  - List all endpoints (`/`, `/health`, `/v1/...`).
  - For each endpoint, specify: HTTP method, URL, and a brief description.
  - For each endpoint, provide JSON response examples for successful execution.
  - Create a comprehensive list of all possible errors with their corresponding HTTP statuses (`413`, `415`, `422`, `504`) and a JSON response example for an error condition.
  - Mention the availability of auto-generated documentation (e.g., at `/docs`).
- Non-Functional Requirements (NFRs):
  - Specify concrete, measurable performance parameters (e.g., max file size in MB, processing timeout in seconds).
  - Describe requirements for logging and configuration via environment variables (specify their names: `API_PORT`, `OCR_LANGUAGES`, etc.).
- Technology Stack and Deployment:
  - Specify the mandatory technology stack if it is predefined (e.g., `Python`, `FastAPI`, `Uvicorn`).
  - Describe the requirement to deliver the service as a `Docker container` and to fix dependencies in a `requirements.txt` file.
- Testing and Project Management:
  - Describe the purpose of a `Makefile` with commands for managing the project lifecycle (`dev`, `prod`, `test`).
  - Describe the logic for the test scenario (`make test`), including the naming convention for output files (e.g., `.ok.txt`, `.err.txt`).
  - Specify that test results must be added to `.gitignore`.

## Project

Sources structure and main files:

- `app` - main folder for sources code
- `app/__init__.py` - package initializer
- `app/config.py` - project configuration
- `app/extractors.py` - extractors for all supported formats
- `app/main.py` - main application logic
- `app/utils.py` - utility functions for the project
- `docs/TZ.md` - target description, technical specifications, and updates. Keep this file up to date
- `tests` - folder for test cases and test data
- `Makefile` - command file
- `CHANGELOG.md` - changelog file. Always add all completed tasks in this file (use current day and sh command don't forget it). Version for changelog in files `config.py` variable `VERSION` (use this variable to head the list of changes).
  - For example: VERSION: str = "1.8.0", current day `2025-07-06` -> Heading in CHANGELOG.md `## [1.8.0] - 2025-07-06`.
- `README.md` - readme file. Always update this file if necessary.
- `docs/TODO.md` - todo task list

## Commands

- `make test` - run tests in docker
- `make lint` - full check linters
- `make install-linters` - setup tools
- `make format`  - auto code format
- `make lint-check` - checking with the linter without corrections

## Github

- This project added to the github https://github.com/Diversus23/extract-text
- github workflow in file `.github/workflows/ci.yml`
