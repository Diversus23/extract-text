#!/bin/tcsh

# –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª tcsh –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
# –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ tcsh shell

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setenv PROJECT_NAME "text-extraction-api"
setenv API_VERSION "1.7"
setenv API_PORT "7555"
setenv LOG_LEVEL "INFO"
setenv MAX_WORKERS "4"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
set server_url = "http://localhost:${API_PORT}"
set log_file = "/tmp/tcsh_test.log"
set test_files_dir = "./tests"
set results_dir = "./results"

# –ú–∞—Å—Å–∏–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
set supported_formats = (pdf docx doc txt html md jpg jpeg png tiff py js ts java cpp bsl os)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
alias log_message 'echo "`date '+%Y-%m-%d %H:%M:%S'` [\!:1] \!:2*" | tee -a $log_file'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
alias check_dependency 'which \!:1 >& /dev/null; if ($status == 0) then; echo "‚úÖ \!:1 –Ω–∞–π–¥–µ–Ω"; else; echo "‚ùå \!:1 –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; endif'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞
send_http_request:
    set method = $1
    set url = $2
    set output_file = $3
    
    log_message "DEBUG" "–û—Ç–ø—Ä–∞–≤–∫–∞ $method –∑–∞–ø—Ä–æ—Å–∞ –∫ $url"
    
    if ("$method" == "GET") then
        curl -s -X GET "$url" -o "$output_file"
    else if ("$method" == "POST") then
        curl -s -X POST "$url" -F "file=@$4" -o "$output_file"
    else
        log_message "ERROR" "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π HTTP –º–µ—Ç–æ–¥: $method"
        exit 1
    endif
    
    if ($status == 0) then
        log_message "INFO" "HTTP –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω"
        return 0
    else
        log_message "ERROR" "HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω"
        return 1
    endif

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∑–¥–æ—Ä–æ–≤—å—è
check_api_health:
    log_message "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"
    
    set temp_file = "/tmp/health_check.json"
    send_http_request "GET" "${server_url}/health" "$temp_file"
    
    if ($status == 0) then
        set health_status = `cat $temp_file | grep -o '"status":"[^"]*"' | cut -d'"' -f4`
        if ("$health_status" == "ok") then
            log_message "INFO" "API –∑–¥–æ—Ä–æ–≤"
            rm -f "$temp_file"
            return 0
        else
            log_message "ERROR" "API –Ω–µ–∑–¥–æ—Ä–æ–≤: $health_status"
            rm -f "$temp_file"
            return 1
        endif
    else
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API"
        return 1
    endif

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ API
get_api_info:
    log_message "INFO" "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ API"
    
    set temp_file = "/tmp/api_info.json"
    send_http_request "GET" "${server_url}/" "$temp_file"
    
    if ($status == 0) then
        set api_name = `cat $temp_file | grep -o '"api_name":"[^"]*"' | cut -d'"' -f4`
        set version = `cat $temp_file | grep -o '"version":"[^"]*"' | cut -d'"' -f4`
        
        log_message "INFO" "API: $api_name"
        log_message "INFO" "–í–µ—Ä—Å–∏—è: $version"
        
        rm -f "$temp_file"
        return 0
    else
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ API"
        return 1
    endif

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
test_file_extraction:
    set file_path = $1
    set file_name = $2
    
    log_message "INFO" "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: $file_name"
    
    if (! -f "$file_path") then
        log_message "WARNING" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file_path"
        return 1
    endif
    
    set temp_result = "/tmp/extract_result_${file_name}.json"
    send_http_request "POST" "${server_url}/v1/extract-text/" "$temp_result" "$file_path"
    
    if ($status == 0) then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        set has_text = `grep -c '"text"' "$temp_result"`
        set has_word_count = `grep -c '"word_count"' "$temp_result"`
        set has_char_count = `grep -c '"character_count"' "$temp_result"`
        
        if ($has_text > 0 && $has_word_count > 0 && $has_char_count > 0) then
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            set word_count = `cat $temp_result | grep -o '"word_count":[0-9]*' | cut -d':' -f2`
            set char_count = `cat $temp_result | grep -o '"character_count":[0-9]*' | cut -d':' -f2`
            
            log_message "INFO" "–§–∞–π–ª $file_name —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            log_message "INFO" "–°–ª–æ–≤: $word_count, –°–∏–º–≤–æ–ª–æ–≤: $char_count"
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (! -d "$results_dir") then
                mkdir -p "$results_dir"
            endif
            
            cp "$temp_result" "${results_dir}/${file_name}.json"
            
            rm -f "$temp_result"
            return 0
        else
            log_message "ERROR" "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è $file_name"
            rm -f "$temp_result"
            return 1
        endif
    else
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª $file_name"
        return 1
    endif

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
test_error_handling:
    log_message "INFO" "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    set unsupported_file = "/tmp/test.unsupported"
    echo "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" > "$unsupported_file"
    
    set temp_result = "/tmp/error_test.json"
    send_http_request "POST" "${server_url}/v1/extract-text/" "$temp_result" "$unsupported_file"
    
    if ($status != 0) then
        log_message "INFO" "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
        rm -f "$unsupported_file" "$temp_result"
        return 0
    else
        log_message "ERROR" "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω"
        rm -f "$unsupported_file" "$temp_result"
        return 1
    endif

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
main:
    log_message "INFO" "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
    log_message "INFO" "–ü—Ä–æ–µ–∫—Ç: $PROJECT_NAME, –í–µ—Ä—Å–∏—è: $API_VERSION"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log_message "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    check_dependency curl
    check_dependency grep
    check_dependency cut
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    check_api_health
    if ($status != 0) then
        log_message "ERROR" "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    endif
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ API
    get_api_info
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    log_message "INFO" "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    
    set total_tests = 0
    set passed_tests = 0
    
    foreach format ($supported_formats)
        set test_file = "${test_files_dir}/test.${format}"
        if (-f "$test_file") then
            @ total_tests++
            test_file_extraction "$test_file" "test.${format}"
            if ($status == 0) then
                @ passed_tests++
            endif
        endif
    end
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    @ total_tests++
    test_error_handling
    if ($status == 0) then
        @ passed_tests++
    endif
    
    # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    log_message "INFO" "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    log_message "INFO" "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $passed_tests –∏–∑ $total_tests"
    
    if ($passed_tests == $total_tests) then
        log_message "INFO" "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        exit 0
    else
        @ failed_tests = $total_tests - $passed_tests
        log_message "ERROR" "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $failed_tests"
        exit 1
    endif

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if ($#argv == 0) then
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    main
else
    switch ($1)
        case "health":
            check_api_health
            breaksw
        case "info":
            get_api_info
            breaksw
        case "test":
            if ($#argv >= 2) then
                test_file_extraction "$2" "`basename $2`"
            else
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 test <—Ñ–∞–π–ª>"
                exit 1
            endif
            breaksw
        case "help":
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞] [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  health     - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API"
            echo "  info       - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ API"
            echo "  test <—Ñ–∞–π–ª> - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"
            echo "  help       - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo "  (–ø—É—Å—Ç–∞—è)   - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
            breaksw
        default:
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            breaksw
    endsw
endif 