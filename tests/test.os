///////////////////////////////////////////////////////////////////////////////
// Модуль для работы с текстовыми данными в OneScript
// Тестовый файл для проверки извлечения текста из исходного кода OneScript
//
// Версия: 1.0
// Автор: Тестовый разработчик
///////////////////////////////////////////////////////////////////////////////

#Использовать "json"
#Использовать "logos"
#Использовать "1commands"

Перем Лог;
Перем КэшДанных;
Перем НастройкиОбработки;

///////////////////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////////////////

// Функция обрабатывает входной текст и возвращает результат
//
// Параметры:
//  ВходнойТекст - Строка - текст для обработки
//  НастройкиОбработки - Структура - параметры обработки
//
// Возвращаемое значение:
//  Структура - результат обработки с полями:
//   * ОбработанныйТекст - Строка
//   * КоличествоСимволов - Число
//   * КоличествоСтрок - Число
//   * ВремяОбработки - Дата
//
Функция ОбработатьТекст(ВходнойТекст, НастройкиОбработки = Неопределено) Экспорт
	
	ВремяНачала = ТекущаяДата();
	
	Если НастройкиОбработки = Неопределено Тогда
		НастройкиОбработки = ПолучитьНастройкиПоУмолчанию();
	КонецЕсли;
	
	// Проверка входных параметров
	Если НЕ ЗначениеЗаполнено(ВходнойТекст) Тогда
		ВызватьИсключение "Не заполнен обязательный параметр 'ВходнойТекст'";
	КонецЕсли;
	
	Лог.Информация("Начало обработки текста. Длина: " + СтрДлина(ВходнойТекст));
	
	Результат = Новый Структура;
	Результат.Вставить("ОбработанныйТекст", "");
	Результат.Вставить("КоличествоСимволов", 0);
	Результат.Вставить("КоличествоСтрок", 0);
	Результат.Вставить("ВремяОбработки", ВремяНачала);
	
	Попытка
		
		// Основная обработка текста
		ОбработанныйТекст = СтрЗаменить(ВходнойТекст, Символы.ВК, Символы.ПС);
		
		Если НастройкиОбработки.УдалитьЛишниеПробелы Тогда
			ОбработанныйТекст = СокрЛП(ОбработанныйТекст);
		КонецЕсли;
		
		Если НастройкиОбработки.ПриводитьКВерхнемуРегистру Тогда
			ОбработанныйТекст = ВРег(ОбработанныйТекст);
		ИначеЕсли НастройкиОбработки.ПриводитьКНижнемуРегистру Тогда
			ОбработанныйТекст = НРег(ОбработанныйТекст);
		КонецЕсли;
		
		// Дополнительная обработка для OneScript
		Если НастройкиОбработки.ИспользоватьРегулярныеВыражения Тогда
			ОбработанныйТекст = ОбработатьРегулярнымиВыражениями(ОбработанныйТекст);
		КонецЕсли;
		
		// Подсчет статистики
		Результат.ОбработанныйТекст = ОбработанныйТекст;
		Результат.КоличествоСимволов = СтрДлина(ОбработанныйТекст);
		Результат.КоличествоСтрок = СтрЧислоСтрок(ОбработанныйТекст);
		
		// Кэширование результата
		Если НастройкиОбработки.ИспользоватьКэш Тогда
			СохранитьВКэш(ВходнойТекст, Результат);
		КонецЕсли;
		
		ВремяОкончания = ТекущаяДата();
		ВремяОбработки = ВремяОкончания - ВремяНачала;
		
		Лог.Информация("Обработка завершена. Время выполнения: " + ВремяОбработки + " сек.");
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Лог.Ошибка("Ошибка при обработке текста: " + ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура выполняет пакетную обработку массива текстов
//
// Параметры:
//  МассивТекстов - Массив из Строка - тексты для обработки
//  НастройкиОбработки - Структура - параметры обработки
//
// Возвращаемое значение:
//  Массив - результаты обработки
//
Функция ОбработатьПакетТекстов(МассивТекстов, НастройкиОбработки = Неопределено) Экспорт
	
	Если НастройкиОбработки = Неопределено Тогда
		НастройкиОбработки = ПолучитьНастройкиПоУмолчанию();
	КонецЕсли;
	
	РезультатыОбработки = Новый Массив;
	КоличествоЭлементов = МассивТекстов.Количество();
	
	Лог.Информация("Начало пакетной обработки. Количество элементов: " + КоличествоЭлементов);
	
	Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
		
		ТекущийТекст = МассивТекстов[Индекс];
		
		Если ЗначениеЗаполнено(ТекущийТекст) Тогда
			Попытка
				РезультатОбработки = ОбработатьТекст(ТекущийТекст, НастройкиОбработки);
				РезультатыОбработки.Добавить(РезультатОбработки);
			Исключение
				Лог.Предупреждение("Ошибка при обработке элемента " + Индекс + ": " + ОписаниеОшибки());
				РезультатыОбработки.Добавить(Неопределено);
			КонецПопытки;
		Иначе
			РезультатыОбработки.Добавить(Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Лог.Информация("Пакетная обработка завершена");
	
	Возврат РезультатыОбработки;
	
КонецФункции

// Функция сохраняет результат в JSON файл
//
// Параметры:
//  РезультатОбработки - Структура - результат обработки
//  ПутьКФайлу - Строка - путь к файлу для сохранения
//
Процедура СохранитьРезультатВJSON(РезультатОбработки, ПутьКФайлу) Экспорт
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ПутьКФайлу);
		
		ЗаписатьJSON(ЗаписьJSON, РезультатОбработки);
		
		ЗаписьJSON.Закрыть();
		
		Лог.Информация("Результат сохранен в файл: " + ПутьКФайлу);
		
	Исключение
		Лог.Ошибка("Ошибка при сохранении в JSON: " + ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции
///////////////////////////////////////////////////////////////////////////////

// Функция возвращает настройки обработки по умолчанию
//
// Возвращаемое значение:
//  Структура - настройки
//
Функция ПолучитьНастройкиПоУмолчанию()
	
	Настройки = Новый Структура;
	Настройки.Вставить("УдалитьЛишниеПробелы", Истина);
	Настройки.Вставить("ПриводитьКВерхнемуРегистру", Ложь);
	Настройки.Вставить("ПриводитьКНижнемуРегистру", Ложь);
	Настройки.Вставить("ИспользоватьКэш", Истина);
	Настройки.Вставить("ИспользоватьРегулярныеВыражения", Ложь);
	
	Возврат Настройки;
	
КонецФункции

// Функция обрабатывает текст регулярными выражениями
//
// Параметры:
//  Текст - Строка - исходный текст
//
// Возвращаемое значение:
//  Строка - обработанный текст
//
Функция ОбработатьРегулярнымиВыражениями(Текст)
	
	// Удаление лишних пробелов
	РегВыражение = Новый РегулярноеВыражение("\s+");
	Результат = РегВыражение.Заменить(Текст, " ");
	
	// Удаление HTML тегов
	РегВыражение = Новый РегулярноеВыражение("<[^>]*>");
	Результат = РегВыражение.Заменить(Результат, "");
	
	// Удаление email адресов
	РегВыражение = Новый РегулярноеВыражение("\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b");
	Результат = РегВыражение.Заменить(Результат, "[EMAIL]");
	
	Возврат Результат;
	
КонецФункции

// Процедура сохраняет результат в кэш
//
// Параметры:
//  ИсходныйТекст - Строка - исходный текст
//  РезультатОбработки - Структура - результат обработки
//
Процедура СохранитьВКэш(ИсходныйТекст, РезультатОбработки)
	
	Если КэшДанных = Неопределено Тогда
		КэшДанных = Новый Соответствие;
	КонецЕсли;
	
	ХешТекста = ПолучитьХешСтроки(ИсходныйТекст);
	КэшДанных.Вставить(ХешТекста, РезультатОбработки);
	
	Лог.Отладка("Результат сохранен в кэш. Хеш: " + ХешТекста);
	
КонецПроцедуры

// Функция возвращает хеш строки
//
// Параметры:
//  Строка - Строка - исходная строка
//
// Возвращаемое значение:
//  Строка - хеш
//
Функция ПолучитьХешСтроки(Строка)
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(Строка);
	
	Возврат НижнийРегистр(СтрЗаменить(Хеширование.ХешСумма, " ", ""));
	
КонецФункции

// Процедура инициализации модуля
//
Процедура ИнициализацияМодуля()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.textprocessor");
	КэшДанных = Новый Соответствие;
	НастройкиОбработки = ПолучитьНастройкиПоУмолчанию();
	
	Лог.Информация("Модуль TextProcessor инициализирован");
	
КонецПроцедуры

// Основная программа
//
Процедура ОсновнаяПрограмма()
	
	// Пример использования
	ТестовыйТекст = "Это тестовый текст для проверки обработки в OneScript.
	|Многострочный текст с различными символами: !@#$%^&*()
	|Email: test@example.com
	|HTML: <b>Жирный текст</b>
	|Обычный текст для тестирования функций.";
	
	Лог.Информация("Запуск тестового примера");
	
	Результат = ОбработатьТекст(ТестовыйТекст);
	
	Лог.Информация("Тестовый пример завершен. Результат:");
	Лог.Информация("Символов: " + Результат.КоличествоСимволов);
	Лог.Информация("Строк: " + Результат.КоличествоСтрок);
	
КонецПроцедуры

// Инициализация при загрузке модуля
ИнициализацияМодуля();

// Если модуль запущен как основная программа
Если ЭтотОбъект = Неопределено Тогда
	ОсновнаяПрограмма();
КонецЕсли; 